#NODEPORT

apiVersion: v1 
kind: Service 
metadata:
 name: myapp-service 
spec:
 type: NodePort  # There is Nodeport , ClusterIP , Load Balancer
 ports: 
  - targetPort: 80  # Port on POD were actual web server is running is port 80,referred as targetPort, because that is were the service forwards the requests to.
    port: 80  #  Port on the service itself. It is simply referred to as the port.
    nodePort: 30008 # Port on the Node itself which we use to access the web server externally,NodePorts can only be in a valid range which is from 30000 to 32767.

    # There is nothing here in the definition file that connects the service to the POD. We have simply specified the targetPort but 
    # didn’t mention the targetPort on which POD. There could be 100s of other PODs with web services running on port 80.
    # Like in ReplicaSet, we will use labels and selectors to link these together.

 selector:
    app: myapp 
    type: front-end
     

#CLUSTERIP

apiVersion: v1 
kind: Service 
metadata:
 name: back-end 
spec: 
 type: ClusterIP # ClusterIP is the default type, so even if you didn’t specify it, it will automatically assume it to be ClusterIP
 ports: 
  - targetPort: 80  # The target port is the port were the back-end is exposed, which in this case is 80
    port: 80  #  the port is were the service is exposed. Which is 80 as well
 selector: # To link the service to a set of PODs, we use selector. 
    app: myapp 
    type: back-end

#LOADBALANCER

apiVersion: v1 
kind: Service 
metadata:
 name: myapp-service 
spec:
 type: LoadBalancer   
 ports: 
  - targetPort: 80  
    port: 80  
    nodePort: 30008 


#################






  

